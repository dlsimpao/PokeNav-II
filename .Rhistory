mutate(
Level = substring(Level, 0, nchar(as.character(Level)) / 2),
`Pwr.` = as.character(`Pwr.`),
PP = as.character(PP),
Method = "Level"
) %>%
as_tibble()
# By Machine
if (gen > 3) {
byMachine <- h %>%
html_nodes("table.roundy") %>%
.[[3]] %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
slice(5:nrow(.)) %>%
select(3:8)
colnames(byMachine) <- c("Move", "Type", "Cat.", "Pwr.", "Acc.", "PP")
} else {
byMachine <- h %>%
html_nodes("table.roundy") %>%
.[[3]] %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
slice(5:nrow(.)) %>%
select(3:7) %>%
mutate(cat = "Depends on Type")
colnames(byMachine) <- c("Move", "Type", "Pwr.", "Acc.", "PP", "Cat.")
}
byMachine <- byMachine %>%
as_tibble() %>%
mutate(
Level = "",
Method = "Machine"
)
if (Mon %in% c("Meltan", "Melmetal")){
byBreed <- tibble(
Move = "NA",
Type = "NA",
`Pwr.` = "NA",
`Acc.` = "NA",
PP = "NA",
`Cat.` = "NA",
)
} else if (gen > 3) {
byBreed <- h %>%
html_nodes("table.roundy") %>%
.[[5]] %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
slice(5:nrow(.)) %>%
select(2:7)
colnames(byBreed) <- c("Move", "Type", "Cat.", "Pwr.", "Acc.", "PP")
} else if (gen > 1) {
byBreed <- h %>%
html_nodes("table.roundy") %>%
.[[5]] %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
slice(5:nrow(.)) %>%
select(2:6) %>%
mutate(cat = "Depends on Type")
colnames(byBreed) <- c("Move", "Type", "Pwr.", "Acc.", "PP", "Cat.")
} else {
byBreed <- tibble(
Move = "NA",
Type = "NA",
`Pwr.` = "NA",
`Acc.` = "NA",
PP = "NA",
`Cat.` = "NA",
)
}
byBreed <- byBreed %>%
as_tibble() %>%
mutate(
Level = "",
Method = "Breed"
)
learnset <- bind_rows(byLevel, byMachine, byBreed)
as_tibble(learnset) %>%
filter(!str_detect(Type, "(Type|Bold|Move)")) %>%
mutate(
`Acc.` = case_when(
grepl("—", `Acc.`) ~ gsub(".*", "—%", `Acc.`),
grepl("\\d*}}", `Acc.`) ~ gsub("\\d*}}", "", `Acc.`),
grepl("\\d{3}[^%]", `Acc.`) ~ gsub("^\\d{3}", "", `Acc.`),
TRUE ~ `Acc.`
),
`Pwr.` = case_when(
grepl("—", `Pwr.`) ~ gsub(".*", "—", `Pwr.`),
grepl("^0", `Pwr.`) ~ substring(`Pwr.`, 4, 5),
TRUE ~ substring(`Pwr.`, 0, 3)
)
) %>%
select("Move", "Type", "Cat.", "Pwr.", "Acc.", "PP", "Method")
}
View(getLearnset("Magikarp", "III"))
byLevel <- h %>%
html_node("table.sortable") %>%
html_table() %>%
as.data.frame()
byLevel
byLevel <- byLevel %>%
select(1, Move, Type, Power, Accuracy, PP) %>%
mutate(`Cat.` = "Depends on Type")
tryCatch({
byLevel <- byLevel %>%
select(1, Move, Type, Power, Accuracy, PP) %>%
mutate(`Cat.` = "Depends on Type")
},error = function(err){
byLevel <- byLevel %>%
select(1, Move, Type, `Pwr.`, `Acc.`, PP) %>%
mutate(`Cat.` = "Depends on Type")
},warning = function(cond){
message("Try something else")
})
byLevel
tryCatch({
byLevel <- byLevel %>%
select(1, Move, Type, Power, Accuracy, PP) %>%
mutate(`Cat.` = "Depends on Type")
},error = function(err){
byLevel <- byLevel %>%
select(1, Move, Type, `Pwr.`, `Acc.`, PP) %>%
mutate(`Cat.` = "Depends on Type")
},warning = function(cond){
message("Try something else")
})
byLevel
byLevel <- tryCatch({
byLevel %>%
select(1, Move, Type, Power, Accuracy, PP) %>%
mutate(`Cat.` = "Depends on Type")
},error = function(err){
byLevel %>%
select(1, Move, Type, `Pwr.`, `Acc.`, PP) %>%
mutate(`Cat.` = "Depends on Type")
},warning = function(cond){
message("Try something else")
})
byLevel
# Special cases: MelMetal, Meltan, MissingNo
getLearnset <- function(Mon, gen = "III") {
if (Mon %in% c("Melmetal", "Meltan")) {
link <- "https://bulbapedia.bulbagarden.net/wiki/{mon}_(Pok%C3%A9mon)/Generation_{gen}_learnset#By_TM.2FHM"
} else {
link <- "https://bulbapedia.bulbagarden.net/wiki/{mon}_(Pok%C3%A9mon)/Generation_{gen}_learnset#By_leveling_up"
}
h <- read_html(str_glue(link,
mon = Mon, gen = gen
))
gen <- case_when(
gen == "I" ~ 1,
gen == "II" ~ 2,
gen == "III" ~ 3,
gen == "IV" ~ 4,
gen == "V" ~ 5,
gen == "VI" ~ 6,
gen == "VII" ~ 7,
gen == "VIII" ~ 8,
TRUE ~ 0
)
# By Level
if (gen > 3) {
byLevel <- h %>%
html_node("table.sortable") %>%
html_table() %>%
as.data.frame() %>%
select(1, Move, Type, `Cat.`, `Pwr.`, `Acc.`, PP)
colnames(byLevel) <- c("Level", "Move", "Type", "Cat.", "Pwr.", "Acc.", "PP")
} else {
byLevel <- h %>%
html_node("table.sortable") %>%
html_table() %>%
as.data.frame()
byLevel <- tryCatch({
byLevel %>%
select(1, Move, Type, Power, Accuracy, PP) %>%
mutate(`Cat.` = "Depends on Type")
},error = function(err){
byLevel %>%
select(1, Move, Type, `Pwr.`, `Acc.`, PP) %>%
mutate(`Cat.` = "Depends on Type")
},warning = function(cond){
message("Try something else")
})
colnames(byLevel) <- c("Level", "Move", "Type", "Pwr.", "Acc.", "PP", "Cat.")
# if (gen < 3) {
#   byLevel <- byLevel %>%
#     select(1, Move, Type, Power, Accuracy, PP) %>%
#     mutate(`Cat.` = "Depends on Type")
# } else {
#   byLevel <- byLevel %>%
#     select(1, Move, Type, `Pwr.`, `Acc.`, PP) %>%
#     mutate(`Cat.` = "Depends on Type")
#}
colnames(byLevel) <- c("Level", "Move", "Type", "Pwr.", "Acc.", "PP", "Cat.")
}
# Fix up values
byLevel <- byLevel %>%
mutate(
Level = substring(Level, 0, nchar(as.character(Level)) / 2),
`Pwr.` = as.character(`Pwr.`),
PP = as.character(PP),
Method = "Level"
) %>%
as_tibble()
# By Machine
if (gen > 3) {
byMachine <- h %>%
html_nodes("table.roundy") %>%
.[[3]] %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
slice(5:nrow(.)) %>%
select(3:8)
colnames(byMachine) <- c("Move", "Type", "Cat.", "Pwr.", "Acc.", "PP")
} else {
byMachine <- h %>%
html_nodes("table.roundy") %>%
.[[3]] %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
slice(5:nrow(.)) %>%
select(3:7) %>%
mutate(cat = "Depends on Type")
colnames(byMachine) <- c("Move", "Type", "Pwr.", "Acc.", "PP", "Cat.")
}
byMachine <- byMachine %>%
as_tibble() %>%
mutate(
Level = "",
Method = "Machine"
)
if (Mon %in% c("Meltan", "Melmetal")){
byBreed <- tibble(
Move = "NA",
Type = "NA",
`Pwr.` = "NA",
`Acc.` = "NA",
PP = "NA",
`Cat.` = "NA",
)
} else if (gen > 3) {
byBreed <- h %>%
html_nodes("table.roundy") %>%
.[[5]] %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
slice(5:nrow(.)) %>%
select(2:7)
colnames(byBreed) <- c("Move", "Type", "Cat.", "Pwr.", "Acc.", "PP")
} else if (gen > 1) {
byBreed <- h %>%
html_nodes("table.roundy") %>%
.[[5]] %>%
html_table(fill = TRUE) %>%
as_tibble() %>%
slice(5:nrow(.)) %>%
select(2:6) %>%
mutate(cat = "Depends on Type")
colnames(byBreed) <- c("Move", "Type", "Pwr.", "Acc.", "PP", "Cat.")
} else {
byBreed <- tibble(
Move = "NA",
Type = "NA",
`Pwr.` = "NA",
`Acc.` = "NA",
PP = "NA",
`Cat.` = "NA",
)
}
byBreed <- byBreed %>%
as_tibble() %>%
mutate(
Level = "",
Method = "Breed"
)
learnset <- bind_rows(byLevel, byMachine, byBreed)
as_tibble(learnset) %>%
filter(!str_detect(Type, "(Type|Bold|Move)")) %>%
mutate(
`Acc.` = case_when(
grepl("—", `Acc.`) ~ gsub(".*", "—%", `Acc.`),
grepl("\\d*}}", `Acc.`) ~ gsub("\\d*}}", "", `Acc.`),
grepl("\\d{3}[^%]", `Acc.`) ~ gsub("^\\d{3}", "", `Acc.`),
TRUE ~ `Acc.`
),
`Pwr.` = case_when(
grepl("—", `Pwr.`) ~ gsub(".*", "—", `Pwr.`),
grepl("^0", `Pwr.`) ~ substring(`Pwr.`, 4, 5),
TRUE ~ substring(`Pwr.`, 0, 3)
)
) %>%
select("Move", "Type", "Cat.", "Pwr.", "Acc.", "PP", "Method")
}
View(getLearnset("Bulbasaur", "I"))
View(getLearnset("Magikarp", "II"))
View(getLearnset("Magikarp", "III"))
runApp()
runApp()
runApp()
runApp()
h <- read_html("https://pokemondb.net/location#tab-alola")
h %>%
html_nodes("div")
h %>%
html_nodes("div#loc-alola")
h %>%
html_nodes("div#loc-alola") %>%
html_nodes("a")
h %>%
html_nodes("div#loc-alola") %>%
html_nodes("a") %>%
html_attr()
h %>%
html_nodes("div#loc-alola") %>%
html_nodes("a") %>%
html_attr("href")
alolaLoc <- (getLocations("VII"))
aLocLinks <- h %>%
html_nodes("div#loc-alola") %>%
html_nodes("a") %>%
html_attr("href")
h2 <- read_html(paste0("https://pokemondb.net/",aLocLinks[1])
h2 <- read_html(paste0("https://pokemondb.net/",alolaLinks[1]))
alolaLinks
alolaLinks <- h %>%
html_nodes("div#loc-alola") %>%
html_nodes("a") %>%
html_attr("href")
h2 <- read_html(paste0("https://pokemondb.net/",alolaLinks[1]))
h2 %>%
html_nodes("table.data-table")
h2 %>%
html_nodes("h2")
h2 %>%
html_nodes("h2") %>%
html_text()
h2 %>%
html_nodes("table.data-table")
areas
areas <- h2 %>%
html_nodes("h2") %>%
html_text()
areas
h2 %>%
html_nodes("table.data-table") %>%
.[[1]] %>%
html_table()
h2 %>%
html_nodes("table.data-table") %>%
.[[2]] %>%
html_table()
h2 %>%
html_nodes("table.data-table") %>%
.[[3]] %>%
html_table()
h2 %>%
html_nodes("table.data-table") %>%
.[[4]] %>%
html_table()
h2 %>%
html_nodes("table.data-table") %>%
.[[5]] %>%
html_table()
h2 %>%
html_nodes("table.data-table") %>%
.[[6]] %>%
html_table()
h2 %>%
html_nodes("table.data-table") %>%
.[[7]] %>%
html_table()
h2 %>%
html_nodes("a.ent-name")
h2 %>%
html_nodes("a.ent-name") %>%
html_text()
h %>%
html_nodes("a.ent-name") %>%
html_text() %>%
as_tibble()
h %>%
html_nodes("a.ent-name") %>%
html_text()
h <- read_html(paste0("https://pokemondb.net/",loc_link))
h2 %>%
html_nodes("a.ent-name") %>%
html_text()
h2 %>%
html_nodes("a.ent-name") %>%
html_text() %>%
as_tibble()
getG7Mon <- function(loc_link){
h <- read_html(paste0("https://pokemondb.net/",loc_link))
df <- h %>%
html_nodes("a.ent-name") %>%
html_text() %>%
as_tibble()
df %>% mutate(src = loc_link)
}
allG7Mon_byLoc <- sapply(alolaLinks,function(link) getG7Mon(link))
allG7Mon_byLoc
allG7Mon_byLoc <- lapply(alolaLinks,function(link) getG7Mon(link))
View(allG7Mon_byLoc)
allG7Mon_byLoc <- lapply(alolaLinks,function(link) getG7Mon(link)) %>% bind_rows()
allG7Mon_byLoc
getG7Mon <- function(loc_link){
h <- read_html(paste0("https://pokemondb.net/",loc_link))
df <- h %>%
html_nodes("a.ent-name") %>%
html_text() %>%
as_tibble()
df %>% mutate(src = loc_link %>% gsub("(/location/)","",.))
}
allG7Mon_byLoc <- lapply(alolaLinks,function(link) getG7Mon(link)) %>% bind_rows()
allG7Mon_byLoc
getG7Mon <- function(loc_link){
h <- read_html(paste0("https://pokemondb.net/",loc_link))
df <- h %>%
html_nodes("a.ent-name") %>%
html_text() %>%
as_tibble()
df %>% mutate(src = loc_link %>% gsub("(/location/)","",.)) %>%
rename(Name = value)
}
allG7Mon_byLoc <- lapply(alolaLinks,function(link) getG7Mon(link)) %>% bind_rows()
View(allG7Mon_byLoc)
getG7Mon <- function(loc_link){
h <- read_html(paste0("https://pokemondb.net/",loc_link))
df <- h %>%
html_nodes("a.ent-name") %>%
html_text() %>%
as_tibble()
df %>% mutate(src = loc_link %>% gsub("(/location/)","",.)) %>%
rename(Name = value)
}
allG7Mon_byLoc <- lapply(alolaLinks,function(link) getG7Mon(link)) %>% bind_rows()
save(allG7Mon_byLoc, file = "Gen7_byLoc.RData")
alola_byloc <- lapply(alolaLinks,function(link) getG7Mon(link)) %>% bind_rows()
save(alola_byloc, file = "alolaMon.RData")
alola
alola_byloc
kalos
alola_locs <- alola_byloc$src %>% unique()
alola_locs
alola <- alola_byloc$src %>% unique()
runApp()
ui <- fluidPage(
navbarPage("PokeNav II:",
id = "pages",
tabPanel(
"Mon by Location",
sidebarPanel(
selectInput("gen","Select generation", c("I","II","III","IV","V","VI","VII"), "III"),
checkboxGroupInput("loc-filter", "Select location filter", c("Cities/Towns","Routes","Other")),
selectInput("loc","Select location", "-", "-"),
selectInput("area","Select area", "-"),
selectInput("mon", "Select Pokemon","-"),
selectInput("mon1.2", "See Evolution Line","-")
),
mainPanel(
actionButton("learn", "See Learnset"),
actionButton("dex-info", "See Dex Entry"),
helpText("Note: Move Categories were specified further in Generation 4 and beyond."),
br(),
br(),
DT::dataTableOutput("tbl")
)
),
tabPanel(
"PokeDex",
sidebarPanel(
selectInput("mon2","Enter Pokemon","-"),
helpText("Gen 8 Not Included"),
selectInput("gen2","Select generation", c("All","I","II","III","IV","V","VI"), "All"),
checkboxGroupInput("dex-filter", "Select Pokemon Type(s)", allEmTypes),
actionButton("filter-btn","Apply Filter")
),
mainPanel(
actionButton("learn2", "See Learnset"),
actionButton("dex-info2","See Dex Entry"),
helpText("Note: Move Categories were specified further in Generation 4 and beyond."),
br(),
br(),
DT::dataTableOutput("tbl2")
)
),
tabPanel(
"ItemDex",
navbarPage("Items",
tabPanel(
"General Items",
helpText("Item locations only available for Emerald"),
helpText("Note to self: make interface better"),
DT::dataTableOutput("tbl3")
),
tabPanel(
"TM Information",
selectInput("genP3","Select generation", romGen, "III"),
helpText("TM information available for all generations"),
DT::dataTableOutput("tbl3.2")
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
